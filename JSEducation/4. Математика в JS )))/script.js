console.log(2 + 2);
console.log(2 - 2);
console.log(2 * 2);
console.log(2 / 2);

console.log(2 ** 2); //Возведение в степень
console.log(5 % 2); //Остаток от деления целого на целое.

//Бинарные операторы - пример выше, так как применяется к двум операндам
//Унарные - к одному операнду, пример '-', который делает число отрицательным.
let minusNumb = -10;
console.log(minusNumb);

//Также есть оператор + - позволяет превратить строку в число.
console.log(typeof +'123');

//Можно использовать с любым другим значением, JS попробует автоматом превратить его в число.
console.log(+true);
console.log(+false);
console.log(+NaN);
console.log(+null);
console.log(+'');
console.log(+' ');
console.log(+'123');
console.log(+undefined);

console.log('3' + '5'); //КОНКАТЕНЦИЯ СТРОК. А КАК СДЕЛАТЬ СЛОЖЕНИЕ ЧИСЕЛ??? )))
console.log(+'3' + +'5'); //Вот так :)

//Всё что в скобках считается первым, порядок операторов ВНУТРИ самих скобок, может быть точно такой же, но то, что в скобках считывается первее.
//Также есть порядок операторов!
//Унарный - и +
// ** - возведение в степень
// * - Умножение
// / - деление
// + и - слева направо по порядку
// Оператор присваивания

let count = 1;
count += 2;
console.log(count);
count -= 2;
console.log(count);
count *= 2;
console.log(count);
count /= 2;
console.log(count);
count = 4;
count **= 2;
console.log(count);

//Декремент и инкремент
count = 10;
count--;
count--;
count--;
count++;

console.log(count);

//Постфиксный - пишется после название переменной, значение при приравнивании одной переменной к другой меняется только у той переменной, к которой мы применили постфиксный инк или декр
//Префиксный - пишется перед названием, значение меняется сразу
let newCount = count++;

console.log(newCount);
console.log(count);

//Нестрогое сравнение
console.log(2 == '2'); //true
console.log(3 == 3); //true

//Cтрогое сравнение
console.log(3 === '3'); //false
console.log(3 !== '3'); //true