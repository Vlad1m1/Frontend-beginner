// Можно получить к неявной переменной arguments, которая в виде массива принимает аргументы и выводит их.
// Рассмотрим её чуть позже, чисто для ознакомления.
function logAll() {
  console.log(arguments);
}

logAll("Привет", 555, false);

// Function expression - есть переменная, переменную мы приравниваем к переменной.
// Её нельзя переопределить если const, если let, то можно.
// Нельзя использовать такую функцию до её объявления.
const logHello = function () {
  console.log("Hello!");
}

logHello();

// Arrow Function (далее: Стрелочные функции) - более современный метод объявления функции.
const logGoodBye = () => {
  console.log("Пока-пока!");
}

logGoodBye();

// Не имеет доступ к arguments
// Особенности:
// Неявный возврат при написании в одну строку.
const sum = (a, b) => a + b;
console.log(sum(1, 2));

// Если написать название такой функции без () получится следующее.
const greetings = () => {
  return "Приветствие!";
}

console.log(greetings);

// Уже раннее объявленную переменную в виде функции, можно использовать для инициализации другой переменной.
// Важно не указывать скобки, так как мы приравниванием создаём ЕЩЁ ОДНУ функцию, которая копируется из другой функции.
// В случае если мы укажем скобки, то тогда переменная не превратится в функции, она будет иметь только значение, возвращаемое функцией.
const fn3 = greetings;
console.log(fn3());

// Функции-колбэки - это когда другие функции приняты как параметры в другую функцию.
const anotherLogMessage = (actionBefore, actionAfter) => {
  actionBefore();
  console.log("Привет!");
  actionAfter();
}

const fnn1 = () => console.log("before");
const fnn2 = () => console.log("after");

anotherLogMessage(fnn1, fnn2);

// Также передачу значений можно сделать следующим образом (И ТОЛЬКО ТАКИМ ОБРАЗОМ!!!):
anotherLogMessage(
  () => console.log("до"),
  () => console.log("после")
)
// Если попробовать сделать так, как изначально мы догадались (чисто инструкции), то инструкции выполнятся раньше, и компилятор выдаст ошибку.

// Функции как результат другой функции. Пример:
const validate = (hasAccess) => {
  if (hasAccess)
    return () => console.log("Доступ разрешён :)");
  else
    return () => console.log("Доступ запрещён :(");
}

/**
 * Как функции стоит называть.
 * Первое слово - глагол, который указывает на то, что делает функция.
 * get
 * set
 * create
 * update
 * delete
 * show
 * hide
 * search
 * calc
 * check
 * @description также имейте ввиду, что функции внутри себя не должны иметь ещё какой-то доп. функционал
 */

